@using ServerMonitoring.Helpers
@model ServerMonitoring.Models.DashBoardViewModel

<div class="canvas-container">
    <canvas id="canvas" style="display: block;"></canvas>
</div>


<script>

    $(document).ready(function () {
        //for checking if a new user is using the system
        var tempMobile = 0;
        var tempWeb = 0;
        //boolean to avoid notification when loading the page
        var firstTime = true;

        $.notify.defaults({ className: "success" })
        setInterval(function() {
            $.ajax({
                url: "/api/graphData",
                type: 'GET',
                datatype: 'json',
                success: function(data) {
                    //check if data is valid ?
                    config.data.datasets[0].data = data.MobileUsersData;
                    config.data.datasets[1].data = data.WebUsersData;
                    //Check for om det er første gang, for så skal den ikke notificere
                    if(firstTime) {
                        firstTime = false;
                        tempMobile = config.data.datasets[0].data[0].y;
                        tempWeb = config.data.datasets[1].data[0].y;
                    }
                    if(config.data.datasets[0].data[0].y > tempMobile)
                    {
                        $.notify("New mobile user", {position: "right bottom"});
                    }
                    if(config.data.datasets[1].data[0].y > tempWeb)
                    {
                        $.notify("New web user", {position: "right bottom"});
                    }
                    tempMobile = config.data.datasets[0].data[0].y;
                    tempWeb = config.data.datasets[1].data[0].y;


                    $('#mobileUsersOnline').html(config.data.datasets[0].data[0].y).css("display", "block");
                    $('#webUsersOnline').html(config.data.datasets[1].data[0].y).css("display", "block");
                    $('.loader').css("display", "none");



                    window.myLine.update();
                },
                error: function (error) {
                }
            });
        }, 100 * 60 * 1); //Call every x minutes 1000 * 60 * x

    });

    setInterval(function() {
        $.ajax({
            url: "/api/requestData",
            type: 'GET',
            datatype: 'json',
            success: function(requestData) {
                console.log(requestData.AverageMobilRequests);
                $('#averageUserRequests').html(requestData.TotalRequests);
                $('#averageMobilUserRequests').html(requestData.AverageMobilRequests);
                $('#averageWebUserRequests').html(requestData.AverageWebRequests);
                $('#webRequests').html(requestData.WebRequests);
                $('#mobilRequests').html(requestData.MobilRequests);
                $('#interval').html(requestData.Interval);



            },
            error: function (error) {
            }
        });
    }, 100 * 60 * 1);


    Chart.defaults.global.defaultFontFamily = "Tahoma";
    var color = Chart.helpers.color;
    var config = {
        type: 'line',
        data: {
            datasets: [{
                label: "Active mobile user",
                backgroundColor: color(window.chartColors.red).alpha(0.5).rgbString(),
                borderColor: window.chartColors.red,
                fill: false,
                data: @Html.JsonInsert(Model.MobileUsersData),
            }, {
                label: "Active web users",
                backgroundColor: color(window.chartColors.blue).alpha(0.5).rgbString(),
                borderColor: window.chartColors.blue,
                fill: false,
                data: @Html.JsonInsert(Model.WebUsersData),
            }]
        },
        options: {
            responsive: true,
            title: {
                display: true,
                text: "User activity in the past 24 hours",
                fontSize: 25
            },
            scales: {
                xAxes: [{
                    type: "time",
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Time',
                        fontSize: 18

                    },
                    ticks: {
                        fontSize: 16
                    },
                    unit: 'hour',
                    unitStepSize: 1,
                    time: {
                        displayFormats: {
                            'hour': 'HH:mm'
                        }
                    }
                }],
                yAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Users',
                        fontSize: 18

                    },
                    ticks: {
                        fontSize: 16
                    }
                }]
            },
            legend:{
               display: true,labels:{fontSize:18}
            },
            tooltips: {
                callbacks: {
                    label: function(tooltipItem, data) {
                        var users = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].y;

                        var type;
                        if(tooltipItem.datasetIndex == 0) { type = "Mobile" } else { type="Web"  }

                        return type + ' users: ' + users;
                    },
                    title: function(tooltipItems, data) {
                        var tooltipItem = tooltipItems[0];
                        var time = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].x;
                        return 'Time: ' + moment(time).format('HH:mm');;
                    }
                }
            }
        }
    };

    window.onload = function () {
        var ctx = document.getElementById("canvas").getContext("2d");
        window.myLine = new Chart(ctx, config);
    };


    //document.getElementById('addData').addEventListener('click', function () {
    //    if (config.data.datasets.length > 0) {
    //        var numTicks = myLine.scales['x-axis-0'].ticksAsTimestamps.length;
    //        var lastTime = numTicks ? moment(myLine.scales['x-axis-0'].ticksAsTimestamps[numTicks - 1]) : moment();
    //        var newTime = lastTime
    //            .clone()
    //            .add(1, 'day')
    //            .format('MM/DD/YYYY HH:mm');

    //        for (var index = 0; index < config.data.datasets.length; ++index) {
    //            config.data.datasets[index].data.push({
    //                x: newTime,
    //                y: randomScalingFactor()
    //            });
    //        }

    //        window.myLine.update();
    //    }
    //});

    //document.getElementById('removeData').addEventListener('click', function () {
    //    config.data.datasets.forEach(function (dataset, datasetIndex) {
    //        dataset.data.pop();
    //    });
    //    window.myLine.update();
    //});


</script>

