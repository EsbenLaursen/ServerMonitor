#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ServerMonitoring")]
	public partial class DatabaseModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRequestSummary(RequestSummary instance);
    partial void UpdateRequestSummary(RequestSummary instance);
    partial void DeleteRequestSummary(RequestSummary instance);
    partial void InsertUserSummary(UserSummary instance);
    partial void UpdateUserSummary(UserSummary instance);
    partial void DeleteUserSummary(UserSummary instance);
    partial void InsertSystemSetup(SystemSetup instance);
    partial void UpdateSystemSetup(SystemSetup instance);
    partial void DeleteSystemSetup(SystemSetup instance);
    partial void InsertServerDetail(ServerDetail instance);
    partial void UpdateServerDetail(ServerDetail instance);
    partial void DeleteServerDetail(ServerDetail instance);
    partial void InsertServer(Server instance);
    partial void UpdateServer(Server instance);
    partial void DeleteServer(Server instance);
    partial void InsertActiveUser(ActiveUser instance);
    partial void UpdateActiveUser(ActiveUser instance);
    partial void DeleteActiveUser(ActiveUser instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    partial void InsertRequest(Request instance);
    partial void UpdateRequest(Request instance);
    partial void DeleteRequest(Request instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertSettingsType(SettingsType instance);
    partial void UpdateSettingsType(SettingsType instance);
    partial void DeleteSettingsType(SettingsType instance);
    partial void InsertServerDetailCurrent(ServerDetailCurrent instance);
    partial void UpdateServerDetailCurrent(ServerDetailCurrent instance);
    partial void DeleteServerDetailCurrent(ServerDetailCurrent instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEmailRecipent(EmailRecipent instance);
    partial void UpdateEmailRecipent(EmailRecipent instance);
    partial void DeleteEmailRecipent(EmailRecipent instance);
    #endregion
		
		public DatabaseModelDataContext() : 
				base(global::Model.Properties.Settings.Default.ServerMonitoringConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RequestSummary> RequestSummaries
		{
			get
			{
				return this.GetTable<RequestSummary>();
			}
		}
		
		public System.Data.Linq.Table<UserSummary> UserSummaries
		{
			get
			{
				return this.GetTable<UserSummary>();
			}
		}
		
		public System.Data.Linq.Table<SystemSetup> SystemSetups
		{
			get
			{
				return this.GetTable<SystemSetup>();
			}
		}
		
		public System.Data.Linq.Table<ServerDetail> ServerDetails
		{
			get
			{
				return this.GetTable<ServerDetail>();
			}
		}
		
		public System.Data.Linq.Table<Server> Servers
		{
			get
			{
				return this.GetTable<Server>();
			}
		}
		
		public System.Data.Linq.Table<ActiveUser> ActiveUsers
		{
			get
			{
				return this.GetTable<ActiveUser>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		public System.Data.Linq.Table<Request> Requests
		{
			get
			{
				return this.GetTable<Request>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<SettingsType> SettingsTypes
		{
			get
			{
				return this.GetTable<SettingsType>();
			}
		}
		
		public System.Data.Linq.Table<ServerDetailCurrent> ServerDetailCurrents
		{
			get
			{
				return this.GetTable<ServerDetailCurrent>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EmailRecipent> EmailRecipents
		{
			get
			{
				return this.GetTable<EmailRecipent>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestSummary")]
	public partial class RequestSummary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DatetimeStart;
		
		private int _WebUsers;
		
		private int _MobileUsers;
		
		private int _ResponseTime;
		
		private int _Requests;
		
		private EntitySet<UserSummary> _UserSummaries;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<Event> _Events1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateTimeCreatedChanging(System.DateTime value);
    partial void OnDateTimeCreatedChanged();
    partial void OnWebUsersChanging(int value);
    partial void OnWebUsersChanged();
    partial void OnMobileUsersChanging(int value);
    partial void OnMobileUsersChanged();
    partial void OnResponseTimeChanging(int value);
    partial void OnResponseTimeChanged();
    partial void OnRequestsChanging(int value);
    partial void OnRequestsChanged();
    #endregion
		
		public RequestSummary()
		{
			this._UserSummaries = new EntitySet<UserSummary>(new Action<UserSummary>(this.attach_UserSummaries), new Action<UserSummary>(this.detach_UserSummaries));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Events1 = new EntitySet<Event>(new Action<Event>(this.attach_Events1), new Action<Event>(this.detach_Events1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatetimeStart", DbType="DateTime NOT NULL")]
		public System.DateTime DateTimeCreated
		{
			get
			{
				return this._DatetimeStart;
			}
			set
			{
				if ((this._DatetimeStart != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DatetimeStart = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebUsers", DbType="Int NOT NULL")]
		public int WebUsers
		{
			get
			{
				return this._WebUsers;
			}
			set
			{
				if ((this._WebUsers != value))
				{
					this.OnWebUsersChanging(value);
					this.SendPropertyChanging();
					this._WebUsers = value;
					this.SendPropertyChanged("WebUsers");
					this.OnWebUsersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileUsers", DbType="Int NOT NULL")]
		public int MobileUsers
		{
			get
			{
				return this._MobileUsers;
			}
			set
			{
				if ((this._MobileUsers != value))
				{
					this.OnMobileUsersChanging(value);
					this.SendPropertyChanging();
					this._MobileUsers = value;
					this.SendPropertyChanged("MobileUsers");
					this.OnMobileUsersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseTime", DbType="int NOT NULL")]
		public int ResponseTime
		{
			get
			{
				return this._ResponseTime;
			}
			set
			{
				if ((this._ResponseTime != value))
				{
					this.OnResponseTimeChanging(value);
					this.SendPropertyChanging();
					this._ResponseTime = value;
					this.SendPropertyChanged("ResponseTime");
					this.OnResponseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Requests", DbType="INT not null")]
		public int Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				if ((this._Requests != value))
				{
					this.OnRequestsChanging(value);
					this.SendPropertyChanging();
					this._Requests = value;
					this.SendPropertyChanged("Requests");
					this.OnRequestsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestSummary_UserSummary", Storage="_UserSummaries", ThisKey="Id", OtherKey="RequestSummaryId")]
		public EntitySet<UserSummary> UserSummaries
		{
			get
			{
				return this._UserSummaries;
			}
			set
			{
				this._UserSummaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestSummary_Event", Storage="_Events", ThisKey="Id", OtherKey="RequestSummaryId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestSummary_Event1", Storage="_Events1", ThisKey="Id", OtherKey="RequestSummaryId")]
		public EntitySet<Event> Events1
		{
			get
			{
				return this._Events1;
			}
			set
			{
				this._Events1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserSummaries(UserSummary entity)
		{
			this.SendPropertyChanging();
			entity.RequestSummary = this;
		}
		
		private void detach_UserSummaries(UserSummary entity)
		{
			this.SendPropertyChanging();
			entity.RequestSummary = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.RequestSummary = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.RequestSummary = null;
		}
		
		private void attach_Events1(Event entity)
		{
			this.SendPropertyChanging();
			entity.RequestSummary1 = this;
		}
		
		private void detach_Events1(Event entity)
		{
			this.SendPropertyChanging();
			entity.RequestSummary1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSummary")]
	public partial class UserSummary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RequestSummaryId;
		
		private int _Request;
		
		private int _UserId;
		
		private int _Mobile;
		
		private System.DateTime _DateTimeCreated;
		
		private EntityRef<RequestSummary> _RequestSummary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRequestSummaryIdChanging(int value);
    partial void OnRequestSummaryIdChanged();
    partial void OnRequestChanging(int value);
    partial void OnRequestChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDeviceChanging(int value);
    partial void OnDeviceChanged();
    partial void OnDateTimeCreatedChanging(System.DateTime value);
    partial void OnDateTimeCreatedChanged();
    #endregion
		
		public UserSummary()
		{
			this._RequestSummary = default(EntityRef<RequestSummary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestSummaryId", DbType="Int NOT NULL")]
		public int RequestSummaryId
		{
			get
			{
				return this._RequestSummaryId;
			}
			set
			{
				if ((this._RequestSummaryId != value))
				{
					if (this._RequestSummary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestSummaryIdChanging(value);
					this.SendPropertyChanging();
					this._RequestSummaryId = value;
					this.SendPropertyChanged("RequestSummaryId");
					this.OnRequestSummaryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Request", DbType="Int NOT NULL")]
		public int Request
		{
			get
			{
				return this._Request;
			}
			set
			{
				if ((this._Request != value))
				{
					this.OnRequestChanging(value);
					this.SendPropertyChanging();
					this._Request = value;
					this.SendPropertyChanged("Request");
					this.OnRequestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Int NOT NULL")]
		public int Device
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnDeviceChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Device");
					this.OnDeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateTimeCreated
		{
			get
			{
				return this._DateTimeCreated;
			}
			set
			{
				if ((this._DateTimeCreated != value))
				{
					this.OnDateTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeCreated = value;
					this.SendPropertyChanged("DateTimeCreated");
					this.OnDateTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestSummary_UserSummary", Storage="_RequestSummary", ThisKey="RequestSummaryId", OtherKey="Id", IsForeignKey=true)]
		public RequestSummary RequestSummary
		{
			get
			{
				return this._RequestSummary.Entity;
			}
			set
			{
				RequestSummary previousValue = this._RequestSummary.Entity;
				if (((previousValue != value) 
							|| (this._RequestSummary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequestSummary.Entity = null;
						previousValue.UserSummaries.Remove(this);
					}
					this._RequestSummary.Entity = value;
					if ((value != null))
					{
						value.UserSummaries.Add(this);
						this._RequestSummaryId = value.Id;
					}
					else
					{
						this._RequestSummaryId = default(int);
					}
					this.SendPropertyChanged("RequestSummary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemSetup")]
	public partial class SystemSetup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TagId;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTagIdChanging(string value);
    partial void OnTagIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public SystemSetup()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServerDetail")]
	public partial class ServerDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Created;
		
		private int _Utilization;
		
		private int _Thread;
		
		private int _Processes;
		
		private int _Handles;
		
		private decimal _UpTime;
		
		private decimal _RAMUtilization;
		
		private decimal _RAMAvailable;
		
		private decimal _RAMTotal;
		
		private int _ServerId;
		
		private int _NetworkUtilization;
		
		private int _BytesSent;
		
		private int _BytesReceived;
		
		private EntitySet<Event> _Events;
		
		private EntityRef<Server> _Server;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUtilizationChanging(int value);
    partial void OnUtilizationChanged();
    partial void OnThreadChanging(int value);
    partial void OnThreadChanged();
    partial void OnProcessesChanging(int value);
    partial void OnProcessesChanged();
    partial void OnHandlesChanging(int value);
    partial void OnHandlesChanged();
    partial void OnUpTimeChanging(decimal value);
    partial void OnUpTimeChanged();
    partial void OnRAMUtilizationChanging(decimal value);
    partial void OnRAMUtilizationChanged();
    partial void OnRAMAvailableChanging(decimal value);
    partial void OnRAMAvailableChanged();
    partial void OnRAMTotalChanging(decimal value);
    partial void OnRAMTotalChanged();
    partial void OnServerIdChanging(int value);
    partial void OnServerIdChanged();
    partial void OnNetworkUtilizationChanging(int value);
    partial void OnNetworkUtilizationChanged();
    partial void OnBytesSentChanging(int value);
    partial void OnBytesSentChanged();
    partial void OnBytesReceivedChanging(int value);
    partial void OnBytesReceivedChanged();
    #endregion
		
		public ServerDetail()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Server = default(EntityRef<Server>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Utilization", DbType="Int NOT NULL")]
		public int Utilization
		{
			get
			{
				return this._Utilization;
			}
			set
			{
				if ((this._Utilization != value))
				{
					this.OnUtilizationChanging(value);
					this.SendPropertyChanging();
					this._Utilization = value;
					this.SendPropertyChanged("Utilization");
					this.OnUtilizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thread", DbType="Int NOT NULL")]
		public int Thread
		{
			get
			{
				return this._Thread;
			}
			set
			{
				if ((this._Thread != value))
				{
					this.OnThreadChanging(value);
					this.SendPropertyChanging();
					this._Thread = value;
					this.SendPropertyChanged("Thread");
					this.OnThreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Processes", DbType="Int NOT NULL")]
		public int Processes
		{
			get
			{
				return this._Processes;
			}
			set
			{
				if ((this._Processes != value))
				{
					this.OnProcessesChanging(value);
					this.SendPropertyChanging();
					this._Processes = value;
					this.SendPropertyChanged("Processes");
					this.OnProcessesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Handles", DbType="Int NOT NULL")]
		public int Handles
		{
			get
			{
				return this._Handles;
			}
			set
			{
				if ((this._Handles != value))
				{
					this.OnHandlesChanging(value);
					this.SendPropertyChanging();
					this._Handles = value;
					this.SendPropertyChanged("Handles");
					this.OnHandlesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpTime", DbType="decimal NOT NULL")]
		public decimal UpTime
		{
			get
			{
				return this._UpTime;
			}
			set
			{
				if ((this._UpTime != value))
				{
					this.OnUpTimeChanging(value);
					this.SendPropertyChanging();
					this._UpTime = value;
					this.SendPropertyChanged("UpTime");
					this.OnUpTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAMUtilization", DbType="Decimal(18,0) NOT NULL")]
		public decimal RAMUtilization
		{
			get
			{
				return this._RAMUtilization;
			}
			set
			{
				if ((this._RAMUtilization != value))
				{
					this.OnRAMUtilizationChanging(value);
					this.SendPropertyChanging();
					this._RAMUtilization = value;
					this.SendPropertyChanged("RAMUtilization");
					this.OnRAMUtilizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAMAvailable", DbType="Decimal(18,0) NOT NULL")]
		public decimal RAMAvailable
		{
			get
			{
				return this._RAMAvailable;
			}
			set
			{
				if ((this._RAMAvailable != value))
				{
					this.OnRAMAvailableChanging(value);
					this.SendPropertyChanging();
					this._RAMAvailable = value;
					this.SendPropertyChanged("RAMAvailable");
					this.OnRAMAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAMTotal", DbType="Decimal(18,0) NOT NULL")]
		public decimal RAMTotal
		{
			get
			{
				return this._RAMTotal;
			}
			set
			{
				if ((this._RAMTotal != value))
				{
					this.OnRAMTotalChanging(value);
					this.SendPropertyChanging();
					this._RAMTotal = value;
					this.SendPropertyChanged("RAMTotal");
					this.OnRAMTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerId", DbType="int not null")]
		public int ServerId
		{
			get
			{
				return this._ServerId;
			}
			set
			{
				if ((this._ServerId != value))
				{
					if (this._Server.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServerIdChanging(value);
					this.SendPropertyChanging();
					this._ServerId = value;
					this.SendPropertyChanged("ServerId");
					this.OnServerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetworkUtilization", DbType="INT NOT NULL")]
		public int NetworkUtilization
		{
			get
			{
				return this._NetworkUtilization;
			}
			set
			{
				if ((this._NetworkUtilization != value))
				{
					this.OnNetworkUtilizationChanging(value);
					this.SendPropertyChanging();
					this._NetworkUtilization = value;
					this.SendPropertyChanged("NetworkUtilization");
					this.OnNetworkUtilizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BytesSent", DbType="INT NOT NULL")]
		public int BytesSent
		{
			get
			{
				return this._BytesSent;
			}
			set
			{
				if ((this._BytesSent != value))
				{
					this.OnBytesSentChanging(value);
					this.SendPropertyChanging();
					this._BytesSent = value;
					this.SendPropertyChanged("BytesSent");
					this.OnBytesSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BytesReceived", DbType="INT NOT NULL")]
		public int BytesReceived
		{
			get
			{
				return this._BytesReceived;
			}
			set
			{
				if ((this._BytesReceived != value))
				{
					this.OnBytesReceivedChanging(value);
					this.SendPropertyChanging();
					this._BytesReceived = value;
					this.SendPropertyChanged("BytesReceived");
					this.OnBytesReceivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServerDetail_Event", Storage="_Events", ThisKey="Id", OtherKey="ServerDetailId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Server_ServerDetail", Storage="_Server", ThisKey="ServerId", OtherKey="Id", IsForeignKey=true)]
		public Server Server
		{
			get
			{
				return this._Server.Entity;
			}
			set
			{
				Server previousValue = this._Server.Entity;
				if (((previousValue != value) 
							|| (this._Server.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Server.Entity = null;
						previousValue.ServerDetails.Remove(this);
					}
					this._Server.Entity = value;
					if ((value != null))
					{
						value.ServerDetails.Add(this);
						this._ServerId = value.Id;
					}
					else
					{
						this._ServerId = default(int);
					}
					this.SendPropertyChanged("Server");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.ServerDetail = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.ServerDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Server")]
	public partial class Server : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ServerDetail> _ServerDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Server()
		{
			this._ServerDetails = new EntitySet<ServerDetail>(new Action<ServerDetail>(this.attach_ServerDetails), new Action<ServerDetail>(this.detach_ServerDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Server_ServerDetail", Storage="_ServerDetails", ThisKey="Id", OtherKey="ServerId")]
		public EntitySet<ServerDetail> ServerDetails
		{
			get
			{
				return this._ServerDetails;
			}
			set
			{
				this._ServerDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServerDetails(ServerDetail entity)
		{
			this.SendPropertyChanging();
			entity.Server = this;
		}
		
		private void detach_ServerDetails(ServerDetail entity)
		{
			this.SendPropertyChanging();
			entity.Server = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActiveUsers")]
	public partial class ActiveUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Created;
		
		private int _WebUsers;
		
		private int _MobilUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnWebUsersChanging(int value);
    partial void OnWebUsersChanged();
    partial void OnMobilUsersChanging(int value);
    partial void OnMobilUsersChanged();
    #endregion
		
		public ActiveUser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebUsers", DbType="Int NOT NULL")]
		public int WebUsers
		{
			get
			{
				return this._WebUsers;
			}
			set
			{
				if ((this._WebUsers != value))
				{
					this.OnWebUsersChanging(value);
					this.SendPropertyChanging();
					this._WebUsers = value;
					this.SendPropertyChanged("WebUsers");
					this.OnWebUsersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilUsers", DbType="Int NOT NULL")]
		public int MobilUsers
		{
			get
			{
				return this._MobilUsers;
			}
			set
			{
				if ((this._MobilUsers != value))
				{
					this.OnMobilUsersChanging(value);
					this.SendPropertyChanging();
					this._MobilUsers = value;
					this.SendPropertyChanged("MobilUsers");
					this.OnMobilUsersChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventType")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Created;
		
		private string _Name;
		
		private int _PeakValue;
		
		private bool _Notify;
		
		private int _Risk;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPeakValueChanging(int value);
    partial void OnPeakValueChanged();
    partial void OnNotifyChanging(bool value);
    partial void OnNotifyChanged();
    partial void OnRiskChanging(int value);
    partial void OnRiskChanged();
    #endregion
		
		public EventType()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeakValue", DbType="INT NOT NULL")]
		public int PeakValue
		{
			get
			{
				return this._PeakValue;
			}
			set
			{
				if ((this._PeakValue != value))
				{
					this.OnPeakValueChanging(value);
					this.SendPropertyChanging();
					this._PeakValue = value;
					this.SendPropertyChanged("PeakValue");
					this.OnPeakValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notify", DbType="BIT NOT NULL")]
		public bool Notify
		{
			get
			{
				return this._Notify;
			}
			set
			{
				if ((this._Notify != value))
				{
					this.OnNotifyChanging(value);
					this.SendPropertyChanging();
					this._Notify = value;
					this.SendPropertyChanged("Notify");
					this.OnNotifyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Risk", DbType="Int NOT NULL")]
		public int Risk
		{
			get
			{
				return this._Risk;
			}
			set
			{
				if ((this._Risk != value))
				{
					this.OnRiskChanging(value);
					this.SendPropertyChanging();
					this._Risk = value;
					this.SendPropertyChanged("Risk");
					this.OnRiskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_Events", ThisKey="Id", OtherKey="EventTypeId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Request")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private string _Url;
		
		private System.DateTime _DateCreated;
		
		private int _Device;
		
		private int _RequestTimeMiliSeconds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDeviceChanging(int value);
    partial void OnDeviceChanged();
    partial void OnRequestTimeMiliSecondsChanging(int value);
    partial void OnRequestTimeMiliSecondsChanged();
    #endregion
		
		public Request()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Device", DbType="Int NOT NULL")]
		public int Device
		{
			get
			{
				return this._Device;
			}
			set
			{
				if ((this._Device != value))
				{
					this.OnDeviceChanging(value);
					this.SendPropertyChanging();
					this._Device = value;
					this.SendPropertyChanged("Device");
					this.OnDeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestTimeMiliSeconds", DbType="Int NOT NULL")]
		public int RequestTimeMiliSeconds
		{
			get
			{
				return this._RequestTimeMiliSeconds;
			}
			set
			{
				if ((this._RequestTimeMiliSeconds != value))
				{
					this.OnRequestTimeMiliSecondsChanging(value);
					this.SendPropertyChanging();
					this._RequestTimeMiliSeconds = value;
					this.SendPropertyChanged("RequestTimeMiliSeconds");
					this.OnRequestTimeMiliSecondsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notification")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private bool _Seen;
		
		private System.DateTime _Created;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSeenChanging(bool value);
    partial void OnSeenChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public Notification()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seen", DbType="Bit NOT NULL")]
		public bool Seen
		{
			get
			{
				return this._Seen;
			}
			set
			{
				if ((this._Seen != value))
				{
					this.OnSeenChanging(value);
					this.SendPropertyChanging();
					this._Seen = value;
					this.SendPropertyChanged("Seen");
					this.OnSeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notification_Event", Storage="_Events", ThisKey="Id", OtherKey="NotificationId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Notification = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Notification = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private int _Value;
		
		private int _SettingsTypeId;
		
		private EntityRef<SettingsType> _SettingsType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnSettingsTypeIdChanging(int value);
    partial void OnSettingsTypeIdChanged();
    #endregion
		
		public Setting()
		{
			this._SettingsType = default(EntityRef<SettingsType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingsTypeId", DbType="Int NOT NULL")]
		public int SettingsTypeId
		{
			get
			{
				return this._SettingsTypeId;
			}
			set
			{
				if ((this._SettingsTypeId != value))
				{
					if (this._SettingsType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSettingsTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SettingsTypeId = value;
					this.SendPropertyChanged("SettingsTypeId");
					this.OnSettingsTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SettingsType_Setting", Storage="_SettingsType", ThisKey="SettingsTypeId", OtherKey="Id", IsForeignKey=true)]
		public SettingsType SettingsType
		{
			get
			{
				return this._SettingsType.Entity;
			}
			set
			{
				SettingsType previousValue = this._SettingsType.Entity;
				if (((previousValue != value) 
							|| (this._SettingsType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SettingsType.Entity = null;
						previousValue.Settings.Remove(this);
					}
					this._SettingsType.Entity = value;
					if ((value != null))
					{
						value.Settings.Add(this);
						this._SettingsTypeId = value.Id;
					}
					else
					{
						this._SettingsTypeId = default(int);
					}
					this.SendPropertyChanged("SettingsType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SettingsType")]
	public partial class SettingsType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Setting> _Settings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SettingsType()
		{
			this._Settings = new EntitySet<Setting>(new Action<Setting>(this.attach_Settings), new Action<Setting>(this.detach_Settings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SettingsType_Setting", Storage="_Settings", ThisKey="Id", OtherKey="SettingsTypeId")]
		public EntitySet<Setting> Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				this._Settings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Settings(Setting entity)
		{
			this.SendPropertyChanging();
			entity.SettingsType = this;
		}
		
		private void detach_Settings(Setting entity)
		{
			this.SendPropertyChanging();
			entity.SettingsType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServerDetailCurrent")]
	public partial class ServerDetailCurrent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Created;
		
		private int _Utilization;
		
		private int _Thread;
		
		private int _Processes;
		
		private int _Handles;
		
		private decimal _UpTime;
		
		private int _RAMUtilization;
		
		private int _RAMAvailable;
		
		private int _RAMTotal;
		
		private int _ServerId;
		
		private int _NetworkUtilization;
		
		private int _BytesSent;
		
		private int _BytesReceived;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUtilizationChanging(int value);
    partial void OnUtilizationChanged();
    partial void OnThreadChanging(int value);
    partial void OnThreadChanged();
    partial void OnProcessesChanging(int value);
    partial void OnProcessesChanged();
    partial void OnHandlesChanging(int value);
    partial void OnHandlesChanged();
    partial void OnUpTimeChanging(decimal value);
    partial void OnUpTimeChanged();
    partial void OnRAMUtilizationChanging(int value);
    partial void OnRAMUtilizationChanged();
    partial void OnRAMAvailableChanging(int value);
    partial void OnRAMAvailableChanged();
    partial void OnRAMTotalChanging(int value);
    partial void OnRAMTotalChanged();
    partial void OnServerIdChanging(int value);
    partial void OnServerIdChanged();
    partial void OnNetworkUtilizationChanging(int value);
    partial void OnNetworkUtilizationChanged();
    partial void OnBytesSentChanging(int value);
    partial void OnBytesSentChanged();
    partial void OnBytesReceivedChanging(int value);
    partial void OnBytesReceivedChanged();
    #endregion
		
		public ServerDetailCurrent()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Utilization", DbType="Int NOT NULL")]
		public int Utilization
		{
			get
			{
				return this._Utilization;
			}
			set
			{
				if ((this._Utilization != value))
				{
					this.OnUtilizationChanging(value);
					this.SendPropertyChanging();
					this._Utilization = value;
					this.SendPropertyChanged("Utilization");
					this.OnUtilizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thread", DbType="Int NOT NULL")]
		public int Thread
		{
			get
			{
				return this._Thread;
			}
			set
			{
				if ((this._Thread != value))
				{
					this.OnThreadChanging(value);
					this.SendPropertyChanging();
					this._Thread = value;
					this.SendPropertyChanged("Thread");
					this.OnThreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Processes", DbType="Int NOT NULL")]
		public int Processes
		{
			get
			{
				return this._Processes;
			}
			set
			{
				if ((this._Processes != value))
				{
					this.OnProcessesChanging(value);
					this.SendPropertyChanging();
					this._Processes = value;
					this.SendPropertyChanged("Processes");
					this.OnProcessesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Handles", DbType="Int NOT NULL")]
		public int Handles
		{
			get
			{
				return this._Handles;
			}
			set
			{
				if ((this._Handles != value))
				{
					this.OnHandlesChanging(value);
					this.SendPropertyChanging();
					this._Handles = value;
					this.SendPropertyChanged("Handles");
					this.OnHandlesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpTime", DbType="Decimal(18,0) NOT NULL")]
		public decimal UpTime
		{
			get
			{
				return this._UpTime;
			}
			set
			{
				if ((this._UpTime != value))
				{
					this.OnUpTimeChanging(value);
					this.SendPropertyChanging();
					this._UpTime = value;
					this.SendPropertyChanged("UpTime");
					this.OnUpTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAMUtilization", DbType="Int NOT NULL")]
		public int RAMUtilization
		{
			get
			{
				return this._RAMUtilization;
			}
			set
			{
				if ((this._RAMUtilization != value))
				{
					this.OnRAMUtilizationChanging(value);
					this.SendPropertyChanging();
					this._RAMUtilization = value;
					this.SendPropertyChanged("RAMUtilization");
					this.OnRAMUtilizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAMAvailable", DbType="Int NOT NULL")]
		public int RAMAvailable
		{
			get
			{
				return this._RAMAvailable;
			}
			set
			{
				if ((this._RAMAvailable != value))
				{
					this.OnRAMAvailableChanging(value);
					this.SendPropertyChanging();
					this._RAMAvailable = value;
					this.SendPropertyChanged("RAMAvailable");
					this.OnRAMAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAMTotal", DbType="Int NOT NULL")]
		public int RAMTotal
		{
			get
			{
				return this._RAMTotal;
			}
			set
			{
				if ((this._RAMTotal != value))
				{
					this.OnRAMTotalChanging(value);
					this.SendPropertyChanging();
					this._RAMTotal = value;
					this.SendPropertyChanged("RAMTotal");
					this.OnRAMTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerId", DbType="Int NOT NULL")]
		public int ServerId
		{
			get
			{
				return this._ServerId;
			}
			set
			{
				if ((this._ServerId != value))
				{
					this.OnServerIdChanging(value);
					this.SendPropertyChanging();
					this._ServerId = value;
					this.SendPropertyChanged("ServerId");
					this.OnServerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetworkUtilization", DbType="INT NOT NULL")]
		public int NetworkUtilization
		{
			get
			{
				return this._NetworkUtilization;
			}
			set
			{
				if ((this._NetworkUtilization != value))
				{
					this.OnNetworkUtilizationChanging(value);
					this.SendPropertyChanging();
					this._NetworkUtilization = value;
					this.SendPropertyChanged("NetworkUtilization");
					this.OnNetworkUtilizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BytesSent", DbType="INT NOT NULL")]
		public int BytesSent
		{
			get
			{
				return this._BytesSent;
			}
			set
			{
				if ((this._BytesSent != value))
				{
					this.OnBytesSentChanging(value);
					this.SendPropertyChanging();
					this._BytesSent = value;
					this.SendPropertyChanged("BytesSent");
					this.OnBytesSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BytesReceived", DbType="INT NOT NULL")]
		public int BytesReceived
		{
			get
			{
				return this._BytesReceived;
			}
			set
			{
				if ((this._BytesReceived != value))
				{
					this.OnBytesReceivedChanging(value);
					this.SendPropertyChanging();
					this._BytesReceived = value;
					this.SendPropertyChanged("BytesReceived");
					this.OnBytesReceivedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Created;
		
		private int _EventTypeId;
		
		private int _Value;
		
		private System.Nullable<int> _NotificationId;
		
		private System.Nullable<int> _ServerDetailId;
		
		private System.Nullable<int> _RequestSummaryId;
		
		private EntityRef<RequestSummary> _RequestSummary;
		
		private EntityRef<EventType> _EventType;
		
		private EntityRef<RequestSummary> _RequestSummary1;
		
		private EntityRef<Notification> _Notification;
		
		private EntityRef<ServerDetail> _ServerDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnEventTypeIdChanging(int value);
    partial void OnEventTypeIdChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnNotificationIdChanging(System.Nullable<int> value);
    partial void OnNotificationIdChanged();
    partial void OnServerDetailIdChanging(System.Nullable<int> value);
    partial void OnServerDetailIdChanged();
    partial void OnRequestSummaryIdChanging(System.Nullable<int> value);
    partial void OnRequestSummaryIdChanged();
    #endregion
		
		public Event()
		{
			this._RequestSummary = default(EntityRef<RequestSummary>);
			this._EventType = default(EntityRef<EventType>);
			this._RequestSummary1 = default(EntityRef<RequestSummary>);
			this._Notification = default(EntityRef<Notification>);
			this._ServerDetail = default(EntityRef<ServerDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeId", DbType="Int NULL")]
		public int EventTypeId
		{
			get
			{
				return this._EventTypeId;
			}
			set
			{
				if ((this._EventTypeId != value))
				{
					if (this._EventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EventTypeId = value;
					this.SendPropertyChanged("EventTypeId");
					this.OnEventTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationId", DbType="Int NULL")]
		public System.Nullable<int> NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					if (this._Notification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerDetailId", DbType="Int NULL")]
		public System.Nullable<int> ServerDetailId
		{
			get
			{
				return this._ServerDetailId;
			}
			set
			{
				if ((this._ServerDetailId != value))
				{
					if (this._ServerDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServerDetailIdChanging(value);
					this.SendPropertyChanging();
					this._ServerDetailId = value;
					this.SendPropertyChanged("ServerDetailId");
					this.OnServerDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestSummaryId", DbType="Int NULL")]
		public System.Nullable<int> RequestSummaryId
		{
			get
			{
				return this._RequestSummaryId;
			}
			set
			{
				if ((this._RequestSummaryId != value))
				{
					if ((this._RequestSummary.HasLoadedOrAssignedValue || this._RequestSummary1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestSummaryIdChanging(value);
					this.SendPropertyChanging();
					this._RequestSummaryId = value;
					this.SendPropertyChanged("RequestSummaryId");
					this.OnRequestSummaryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestSummary_Event", Storage="_RequestSummary", ThisKey="RequestSummaryId", OtherKey="Id", IsForeignKey=true)]
		public RequestSummary RequestSummary
		{
			get
			{
				return this._RequestSummary.Entity;
			}
			set
			{
				RequestSummary previousValue = this._RequestSummary.Entity;
				if (((previousValue != value) 
							|| (this._RequestSummary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequestSummary.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._RequestSummary.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._RequestSummaryId = value.Id;
					}
					else
					{
						this._RequestSummaryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("RequestSummary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_EventType", ThisKey="EventTypeId", OtherKey="Id", IsForeignKey=true)]
		public EventType EventType
		{
			get
			{
				return this._EventType.Entity;
			}
			set
			{
				EventType previousValue = this._EventType.Entity;
				if (((previousValue != value) 
							|| (this._EventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._EventType.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._EventTypeId = value.Id;
					}
					else
					{
						this._EventTypeId = default(int);
					}
					this.SendPropertyChanged("EventType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestSummary_Event1", Storage="_RequestSummary1", ThisKey="RequestSummaryId", OtherKey="Id", IsForeignKey=true)]
		public RequestSummary RequestSummary1
		{
			get
			{
				return this._RequestSummary1.Entity;
			}
			set
			{
				RequestSummary previousValue = this._RequestSummary1.Entity;
				if (((previousValue != value) 
							|| (this._RequestSummary1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequestSummary1.Entity = null;
						previousValue.Events1.Remove(this);
					}
					this._RequestSummary1.Entity = value;
					if ((value != null))
					{
						value.Events1.Add(this);
						this._RequestSummaryId = value.Id;
					}
					else
					{
						this._RequestSummaryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("RequestSummary1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notification_Event", Storage="_Notification", ThisKey="NotificationId", OtherKey="Id", IsForeignKey=true)]
		public Notification Notification
		{
			get
			{
				return this._Notification.Entity;
			}
			set
			{
				Notification previousValue = this._Notification.Entity;
				if (((previousValue != value) 
							|| (this._Notification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notification.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Notification.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._NotificationId = value.Id;
					}
					else
					{
						this._NotificationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Notification");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServerDetail_Event", Storage="_ServerDetail", ThisKey="ServerDetailId", OtherKey="Id", IsForeignKey=true)]
		public ServerDetail ServerDetail
		{
			get
			{
				return this._ServerDetail.Entity;
			}
			set
			{
				ServerDetail previousValue = this._ServerDetail.Entity;
				if (((previousValue != value) 
							|| (this._ServerDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServerDetail.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._ServerDetail.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._ServerDetailId = value.Id;
					}
					else
					{
						this._ServerDetailId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServerDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailRecipent")]
	public partial class EmailRecipent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Email;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public EmailRecipent()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
